@inherits OwningComponentBase
@using IDHLDeveloperTest.Models;
@using IDHLDeveloperTest.Services;

<h3>All Characters</h3>

<div class="form-group">
    <input class="form-control" type="text" placeholder="Filter by name..."
           @bind="Filter"
           @bind:event="oninput">
</div>
<div style="padding: 10px;">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in characterList.data)
            {
                if (!IsVisible(character))
                    continue;
                <tr @key="character">
                    <td>@character._id</td>
                    <td><a href="/Character/@character._id">@character.name</a></td>
                    <td><img src=@character.imageUrl width="100" height="100"></td>
                </tr>
            }
            @Page
        </tbody>
    </table>
</div>


<style>
    .pagination-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

@code {
    [Parameter]
    public int Page { get; set; }

    public string Filter { get; set; }

    protected IClientService clientService;
    private CharacterList characterList = new CharacterList();

    protected override async Task OnInitializedAsync()
    {
        clientService = (IClientService)ScopedServices.GetService(typeof(IClientService));
        characterList = await clientService.GetCharacters(Page);
    }

    protected override async void OnParametersSet()
    {
  
        characterList = await clientService.GetCharacters(Page);

    }


    public bool IsVisible(Character character)

    {
        if (string.IsNullOrEmpty(Filter))
            return true;


        if (character.name.ToString().ToLower().StartsWith(Filter.ToLower()))
            return true;

        return false;
    }

}
